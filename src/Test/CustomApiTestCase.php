<?php
/**
 * Created by PhpStorm.
 * User: he110
 * Date: 2020-04-25
 * Time: 13:00
 */

namespace App\Test;


use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\Space;
use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\Client;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class CustomApiTestCase extends ApiTestCase
{
    /** @var Client */
    protected $client;

    protected function createUser(string $email, string $type = 'slack', string $password = null): User
    {
        $user = new User();
        $user->setUid($this->generateUid())
            ->setEmail($email)
            ->setName(ucfirst($type).' user');


        if ($type !== 'admin' && $type !== 'user') {
            $space = $this->createSpace(ucfirst($type) . ' space', $type);
            $user->setSpace($space);
        }

        if ($password) {
            $password = self::$container->get(UserPasswordEncoderInterface::class)
                ->encodePassword($user, $password);
            $user->setPassword($password);
        }


        $em = $this->getEntityManager();
        $em->persist($user);
        $em->flush();

        return $user;
    }

    protected function createSpace(string $name, string $type = 'slack'): Space
    {
        $space = new Space();
        $space->setName($name)
            ->setUid($this->generateUid())
            ->setType($type);

        $em = $this->getEntityManager();
        $em->persist($space);
        $em->flush();

        return $space;
    }

    protected function createUserAndLogIn(string $email, string $password, string $type = 'user'): User
    {
        $user = $this->createUser($email, $type, $password);
        $this->logIn($user, $password);
        return $user;
    }

    protected function logIn(User $user, string $password): void
    {
        $this->client->request('POST', '/login', [
            'json' => array(
                'email' => $user->getEmail(),
                'password' => $password
            )
        ]);

        $this->assertResponseStatusCodeSame(302);
    }

    protected function getEntityManager(): EntityManagerInterface
    {
        return self::$container->get(EntityManagerInterface::class);
    }

    private function generateUid(): string
    {
        return substr(md5(rand(0,100)), 0, 10);
    }

    public function setUp(): void
    {
        $this->client = self::createClient();
        parent::setUp();
    }

    public function tearDown(): void
    {
        unset($this->client);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}